Search.setIndex({"docnames": ["api", "contributing", "experiments/bucket_renormalization", "experiments/inferlo_libdai", "experiments/marginal_probabilities", "generated/inferlo.DiscreteDomain", "generated/inferlo.DiscreteFactor", "generated/inferlo.Domain", "generated/inferlo.Factor", "generated/inferlo.FunctionFactor", "generated/inferlo.GaussianModel", "generated/inferlo.GenericGraphModel", "generated/inferlo.GraphModel", "generated/inferlo.InferenceResult", "generated/inferlo.NormalFactorGraphModel", "generated/inferlo.PairWiseFiniteModel", "generated/inferlo.RealDomain", "generated/inferlo.Variable", "generated/inferlo.datasets.Dataset", "generated/inferlo.datasets.DatasetLoader", "generated/inferlo.datasets.UaiReader", "generated/inferlo.forney.edge_elimination.infer_edge_elimination", "generated/inferlo.forney.optimization.nfg_map_lp.map_lp", "generated/inferlo.gaussian.inference.gaussian_belief_propagation.gaussian_BP", "generated/inferlo.generic.inference.BackwardBucketElimination", "generated/inferlo.generic.inference.inference", "generated/inferlo.generic.libdai_bp.BP", "generated/inferlo.graphs.fast_dfs", "generated/inferlo.graphs.path_decomposition", "generated/inferlo.interop.LibDaiInterop", "generated/inferlo.pairwise.bruteforce.infer_bruteforce", "generated/inferlo.pairwise.bruteforce.max_lh_bruteforce", "generated/inferlo.pairwise.bruteforce.sample_bruteforce", "generated/inferlo.pairwise.inference.mean_field.infer_mean_field", "generated/inferlo.pairwise.inference.message_passing.infer_message_passing", "generated/inferlo.pairwise.inference.path_dp.infer_path_dp", "generated/inferlo.pairwise.inference.tree_dp.infer_tree_dp", "generated/inferlo.pairwise.junction_tree.infer_junction_tree", "generated/inferlo.pairwise.junction_tree.max_likelihood_junction_tree", "generated/inferlo.pairwise.junction_tree.sample_junction_tree", "generated/inferlo.pairwise.junction_tree.to_junction_tree_model", "generated/inferlo.pairwise.optimization.convex_bounds.lp_relaxation", "generated/inferlo.pairwise.optimization.convex_hierarchies.lasserre", "generated/inferlo.pairwise.optimization.convex_hierarchies.sherali_adams", "generated/inferlo.pairwise.optimization.map_lp.map_lp", "generated/inferlo.pairwise.optimization.path_dp.max_lh_path_dp", "generated/inferlo.pairwise.optimization.tree_dp.max_likelihood_tree_dp", "generated/inferlo.pairwise.sampling.tree_dp.sample_tree_dp", "generated/inferlo.testing.clique_potts_model", "generated/inferlo.testing.grid_potts_model", "generated/inferlo.testing.ising_model_on_graph", "generated/inferlo.testing.line_potts_model", "generated/inferlo.testing.pairwise_model_on_graph", "generated/inferlo.testing.random_generic_model", "generated/inferlo.testing.tree_potts_model", "index", "installing", "tutorials/getting_started"], "filenames": ["api.rst", "contributing.md", "experiments/bucket_renormalization.ipynb", "experiments/inferlo_libdai.ipynb", "experiments/marginal_probabilities.ipynb", "generated/inferlo.DiscreteDomain.rst", "generated/inferlo.DiscreteFactor.rst", "generated/inferlo.Domain.rst", "generated/inferlo.Factor.rst", "generated/inferlo.FunctionFactor.rst", "generated/inferlo.GaussianModel.rst", "generated/inferlo.GenericGraphModel.rst", "generated/inferlo.GraphModel.rst", "generated/inferlo.InferenceResult.rst", "generated/inferlo.NormalFactorGraphModel.rst", "generated/inferlo.PairWiseFiniteModel.rst", "generated/inferlo.RealDomain.rst", "generated/inferlo.Variable.rst", "generated/inferlo.datasets.Dataset.rst", "generated/inferlo.datasets.DatasetLoader.rst", "generated/inferlo.datasets.UaiReader.rst", "generated/inferlo.forney.edge_elimination.infer_edge_elimination.rst", "generated/inferlo.forney.optimization.nfg_map_lp.map_lp.rst", "generated/inferlo.gaussian.inference.gaussian_belief_propagation.gaussian_BP.rst", "generated/inferlo.generic.inference.BackwardBucketElimination.rst", "generated/inferlo.generic.inference.inference.rst", "generated/inferlo.generic.libdai_bp.BP.rst", "generated/inferlo.graphs.fast_dfs.rst", "generated/inferlo.graphs.path_decomposition.rst", "generated/inferlo.interop.LibDaiInterop.rst", "generated/inferlo.pairwise.bruteforce.infer_bruteforce.rst", "generated/inferlo.pairwise.bruteforce.max_lh_bruteforce.rst", "generated/inferlo.pairwise.bruteforce.sample_bruteforce.rst", "generated/inferlo.pairwise.inference.mean_field.infer_mean_field.rst", "generated/inferlo.pairwise.inference.message_passing.infer_message_passing.rst", "generated/inferlo.pairwise.inference.path_dp.infer_path_dp.rst", "generated/inferlo.pairwise.inference.tree_dp.infer_tree_dp.rst", "generated/inferlo.pairwise.junction_tree.infer_junction_tree.rst", "generated/inferlo.pairwise.junction_tree.max_likelihood_junction_tree.rst", "generated/inferlo.pairwise.junction_tree.sample_junction_tree.rst", "generated/inferlo.pairwise.junction_tree.to_junction_tree_model.rst", "generated/inferlo.pairwise.optimization.convex_bounds.lp_relaxation.rst", "generated/inferlo.pairwise.optimization.convex_hierarchies.lasserre.rst", "generated/inferlo.pairwise.optimization.convex_hierarchies.sherali_adams.rst", "generated/inferlo.pairwise.optimization.map_lp.map_lp.rst", "generated/inferlo.pairwise.optimization.path_dp.max_lh_path_dp.rst", "generated/inferlo.pairwise.optimization.tree_dp.max_likelihood_tree_dp.rst", "generated/inferlo.pairwise.sampling.tree_dp.sample_tree_dp.rst", "generated/inferlo.testing.clique_potts_model.rst", "generated/inferlo.testing.grid_potts_model.rst", "generated/inferlo.testing.ising_model_on_graph.rst", "generated/inferlo.testing.line_potts_model.rst", "generated/inferlo.testing.pairwise_model_on_graph.rst", "generated/inferlo.testing.random_generic_model.rst", "generated/inferlo.testing.tree_potts_model.rst", "index.rst", "installing.md", "tutorials/getting_started.ipynb"], "titles": ["API Reference", "Contributing to InferLO", "Bucket renormalization", "Inferlo and libDAI comparison", "Marginal Probabilities with Elimination algorithms", "inferlo.DiscreteDomain", "inferlo.DiscreteFactor", "inferlo.Domain", "inferlo.Factor", "inferlo.FunctionFactor", "inferlo.GaussianModel", "inferlo.GenericGraphModel", "inferlo.GraphModel", "inferlo.InferenceResult", "inferlo.NormalFactorGraphModel", "inferlo.PairWiseFiniteModel", "inferlo.RealDomain", "inferlo.Variable", "inferlo.datasets.Dataset", "inferlo.datasets.DatasetLoader", "inferlo.datasets.UaiReader", "inferlo.forney.edge_elimination.infer_edge_elimination", "inferlo.forney.optimization.nfg_map_lp.map_lp", "inferlo.gaussian.inference.gaussian_belief_propagation.gaussian_BP", "inferlo.generic.inference.BackwardBucketElimination", "inferlo.generic.inference.inference", "inferlo.generic.libdai_bp.BP", "inferlo.graphs.fast_dfs", "inferlo.graphs.path_decomposition", "inferlo.interop.LibDaiInterop", "inferlo.pairwise.bruteforce.infer_bruteforce", "inferlo.pairwise.bruteforce.max_lh_bruteforce", "inferlo.pairwise.bruteforce.sample_bruteforce", "inferlo.pairwise.inference.mean_field.infer_mean_field", "inferlo.pairwise.inference.message_passing.infer_message_passing", "inferlo.pairwise.inference.path_dp.infer_path_dp", "inferlo.pairwise.inference.tree_dp.infer_tree_dp", "inferlo.pairwise.junction_tree.infer_junction_tree", "inferlo.pairwise.junction_tree.max_likelihood_junction_tree", "inferlo.pairwise.junction_tree.sample_junction_tree", "inferlo.pairwise.junction_tree.to_junction_tree_model", "inferlo.pairwise.optimization.convex_bounds.lp_relaxation", "inferlo.pairwise.optimization.convex_hierarchies.lasserre", "inferlo.pairwise.optimization.convex_hierarchies.sherali_adams", "inferlo.pairwise.optimization.map_lp.map_lp", "inferlo.pairwise.optimization.path_dp.max_lh_path_dp", "inferlo.pairwise.optimization.tree_dp.max_likelihood_tree_dp", "inferlo.pairwise.sampling.tree_dp.sample_tree_dp", "inferlo.testing.clique_potts_model", "inferlo.testing.grid_potts_model", "inferlo.testing.ising_model_on_graph", "inferlo.testing.line_potts_model", "inferlo.testing.pairwise_model_on_graph", "inferlo.testing.random_generic_model", "inferlo.testing.tree_potts_model", "InferLO", "Installing InferLO", "Getting started with InferLO"], "terms": {"repres": [0, 12, 15, 27, 29, 57], "differ": [0, 3, 4, 15, 25, 29, 36, 40, 53, 57], "kind": [0, 1, 57], "elementari": 0, "concept": [0, 57], "variabl": [0, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21, 22, 25, 26, 29, 33, 40, 41, 42, 43, 44, 50, 51, 53, 54], "factor": [0, 6, 9, 11, 12, 14, 15, 21, 22, 23, 26, 29, 40, 53], "also": [0, 1, 2, 3, 4, 14, 15, 22, 43, 44, 57], "contain": [0, 15, 18, 19, 27, 28, 29, 40], "data": [0, 3, 4, 19, 27, 57], "result": [0, 2, 3, 4, 12, 13, 15, 20, 21, 23, 25, 27, 28, 30, 33, 37, 38, 42, 57], "comput": [0, 4, 21, 24, 25, 28], "all": [0, 1, 3, 8, 11, 12, 14, 15, 16, 18, 19, 22, 25, 26, 27, 28, 29, 30, 31, 40, 41, 42, 43, 51, 54, 57], "ar": [0, 1, 3, 4, 6, 8, 15, 19, 23, 27, 28, 29, 40, 50, 57], "avail": [0, 14, 15, 40], "through": 0, "method": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 29, 42, 43], "To": [0, 1, 29, 57], "invok": [0, 29], "specif": 0, "you": [0, 1, 15, 19, 29, 53, 56, 57], "should": [0, 1, 15, 25, 34, 43, 49, 51, 52, 54, 57], "pass": [0, 1, 15, 23, 24, 25, 29, 34, 57], "its": [0, 12, 15, 22, 29, 36, 44, 57], "name": [0, 1, 4, 8, 15, 18, 19, 29, 57], "argument": [0, 1, 15, 25], "correspond": [0, 2, 14, 15, 22, 25, 40, 42, 43, 44, 57], "That": [0, 1, 15], "": [0, 1, 3, 4, 10, 12, 15, 20, 21, 25, 26, 29, 42, 43, 57], "why": 0, "export": [0, 1], "top": 0, "level": [0, 25, 42, 43], "packag": [0, 1], "howev": [0, 15, 25], "we": [0, 1, 3, 4, 15, 22, 23, 29, 36, 40, 42, 43, 44, 57], "list": [0, 4, 5, 6, 8, 9, 11, 12, 15, 19, 21, 25, 27, 28, 29, 57], "here": 0, "some": [0, 1, 2, 4, 6, 15, 29, 40, 57], "mai": [0, 9, 22, 25, 34, 42, 43, 44, 57], "take": [0, 1, 3, 4, 7, 13, 17, 20, 22, 40, 44, 57], "addit": [0, 27, 57], "paramet": [0, 1, 6, 8, 9, 10, 11, 12, 14, 15, 17, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 49, 50, 51, 52, 53, 54], "number": [0, 2, 3, 4, 5, 9, 10, 11, 12, 14, 15, 20, 22, 23, 25, 27, 29, 32, 33, 34, 39, 51, 53, 54, 57], "iter": [0, 11, 12, 14, 15, 23, 25, 33, 34], "which": [0, 1, 3, 4, 6, 7, 8, 9, 12, 14, 15, 21, 22, 23, 25, 26, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 57], "keyword": [0, 1], "us": [0, 1, 2, 3, 4, 6, 12, 14, 15, 19, 21, 24, 25, 26, 28, 29, 30, 32, 33, 35, 36, 37, 38, 39, 40, 43, 57], "below": [0, 1, 4, 57], "get": [0, 1, 2, 4, 5, 21, 22, 25, 29, 42, 43, 44, 55], "inform": [0, 10], "In": [0, 1, 3, 4, 12, 57], "most": [0, 1, 3, 4, 11, 12, 14, 15, 22, 29, 38, 41, 42, 43, 44, 45, 46, 57], "case": [0, 4, 22, 44, 57], "networkx": [0, 2, 4, 40], "manipul": 0, "i": [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 46, 55, 57], "too": [0, 57], "need": [0, 1, 15, 57], "faster": 0, "than": [0, 4, 20, 40, 57], "implement": [0, 4, 22, 24, 25, 29, 42, 43, 44, 57], "our": [0, 1, 22, 44], "librari": [0, 1, 4, 55, 57], "those": [0, 1, 15, 40, 57], "collect": [0, 10], "thi": [0, 1, 2, 3, 4, 6, 8, 9, 13, 15, 17, 20, 22, 24, 25, 26, 27, 28, 29, 34, 40, 42, 43, 44, 53, 57], "section": [0, 1, 34, 42], "thei": [0, 1, 3, 4, 12, 15, 25, 28, 29, 40, 57], "intend": 0, "intern": 0, "usag": [0, 12], "other": [0, 1, 9, 12, 13, 27, 29, 40, 57], "rather": [0, 57], "directli": 0, "user": [0, 1], "These": [0, 4, 27, 29], "function": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 18, 19, 21, 22, 25, 26, 29, 33, 34, 42, 43, 44, 57], "random": [0, 2, 3, 8, 10, 17, 25, 33, 48, 49, 50, 51, 52, 53, 54], "certain": [0, 15, 57], "structur": [0, 4, 53, 57], "test": [0, 2, 3, 4, 57], "benchmark": [0, 4, 29], "reposs": 0, "gm": [0, 6, 18, 20], "helper": [0, 2], "load": [0, 2, 19], "public": [0, 1], "python": [1, 9, 29, 55], "3": [1, 2, 4, 43, 49, 53, 57], "7": [1, 3, 4, 57], "It": [1, 25, 26, 57], "recommend": [1, 25, 29], "necessari": [1, 14, 57], "do": [1, 25, 40, 57], "virtual": 1, "environ": 1, "clone": [1, 8, 14, 29, 57], "repositori": 1, "http": [1, 10, 19, 20, 22, 23, 24, 25, 27, 28, 29, 40, 42, 43, 44], "github": 1, "com": 1, "cd": 1, "instal": [1, 29, 55], "requir": [1, 15, 22, 29, 40, 44, 57], "pip": [1, 56], "r": [1, 2, 4, 57], "txt": 1, "doc": [1, 29, 57], "tool": 1, "dev_requir": 1, "check": [1, 3, 14, 19, 23, 29, 31], "pytest": 1, "If": [1, 14, 15, 19, 21, 25, 27, 28, 29, 36, 40, 51, 54, 57], "never": 1, "work": [1, 4, 15, 29, 40, 57], "befor": 1, "have": [1, 4, 15, 29, 36, 40, 53, 57], "learn": [1, 55], "basic": [1, 57], "read": [1, 20, 29], "handbook": 1, "bookmark": 1, "print": [1, 4, 57], "cheet": 1, "sheet": 1, "realli": 1, "understand": [1, 57], "how": [1, 2, 3, 15, 33, 34, 57], "out": 1, "site": 1, "For": [1, 4, 10, 15, 19, 22, 23, 25, 29, 34, 44, 53, 57], "make": [1, 11, 14, 15, 29, 40], "ani": [1, 9, 12, 13, 29, 57], "chang": [1, 57], "creat": [1, 5, 6, 8, 9, 11, 15, 29, 57], "branch": 1, "your": [1, 29], "merg": 1, "master": 1, "process": 1, "appli": 1, "who": 1, "ha": [1, 15, 27, 57], "commit": 1, "access": [1, 29, 57], "don": [1, 4, 15, 29, 40, 57], "t": [1, 4, 10, 15, 25, 29, 33, 40, 42, 57], "fork": 1, "own": [1, 29], "Then": [1, 4, 25, 40, 42, 43, 57], "pull": 1, "request": 1, "main": [1, 4], "replac": [1, 57], "my": 1, "descript": [1, 20], "checkout": 1, "b": [1, 2, 41], "back": 1, "exist": [1, 4, 15, 19], "switch": 1, "sync": 1, "when": [1, 13, 15, 34, 57], "readi": [1, 29], "pycodestyl": 1, "pylint": 1, "rcfile": 1, "pylintrc": 1, "save": [1, 19, 25], "can": [1, 4, 7, 12, 13, 15, 17, 25, 29, 53, 56, 57], "run": [1, 3, 4, 25, 26, 27, 29, 56, 57], "check_styl": 1, "sh": [1, 29], "bat": 1, "perform": [1, 3, 10, 11, 12, 15, 23, 24, 25, 26, 29, 30, 33, 34, 35, 36, 37, 39, 46, 57], "them": [1, 4, 12, 15, 19, 29, 32, 40, 57], "add": [1, 11, 12, 14, 15, 22, 25, 44, 57], "commmit": 1, "m": [1, 4, 10, 29, 42], "push": 1, "origin": [1, 6, 14, 15, 22, 25, 27, 37, 38, 39, 40, 41, 44], "head": 1, "error": [1, 2, 3, 4], "point": [1, 6, 8, 9, 12, 21, 23, 33, 57], "sai": [1, 57], "updat": [1, 21, 29], "were": [1, 21, 34], "reject": 1, "remot": 1, "version": 1, "wa": [1, 4, 21, 27, 40], "now": [1, 57], "go": 1, "find": [1, 3, 11, 12, 14, 15, 22, 26, 31, 38, 41, 44, 45, 46, 57], "sure": [1, 40], "continu": [1, 3], "integr": 1, "last": [1, 6, 25, 57], "review": [1, 57], "might": [1, 4], "ask": 1, "sme": 1, "final": [1, 22, 44], "pr": 1, "approv": 1, "unit": 1, "must": [1, 15, 22, 28, 29, 44, 52, 57], "root": [1, 27], "featur": 1, "onli": [1, 15, 23, 25, 28, 29, 36, 40, 46, 57], "file": [1, 19, 20, 29], "affect": 1, "path_to_fil": 1, "py": 1, "pycharm": 1, "one": [1, 6, 8, 12, 15, 21, 22, 23, 25, 29, 40, 44, 57], "chage": 1, "pleas": [1, 10, 23, 57], "global": [1, 2, 25], "coverag": 1, "cover": 1, "word": [1, 12], "incorrect": 1, "fail": [1, 4], "enforc": 1, "automat": [1, 14, 15], "futur": 1, "contributor": 1, "behavior": 1, "2": [1, 9, 10, 15, 22, 25, 27, 34, 35, 41, 44, 48, 51, 52, 53, 54, 57], "independ": [1, 15, 25, 32, 39, 57], "pep8": 1, "set": [1, 5, 7, 10, 15, 17, 19, 25, 27, 29, 51, 54, 57], "simpl": [1, 4, 27, 28, 29, 57], "rule": 1, "about": 1, "layout": 1, "violat": 1, "fix": [1, 6, 23, 25], "autopep8": 1, "script": 1, "fix_styl": 1, "seri": [1, 4], "more": [1, 8, 10, 22, 42, 43, 44, 57], "clever": 1, "both": [1, 4, 22, 44, 57], "mandatori": 1, "won": [1, 15, 25, 40, 57], "let": [1, 42, 43, 57], "yuo": 1, "tom": 1, "mege": 1, "follow": [1, 4, 21, 22, 24, 29, 44, 56], "googl": 1, "guid": 1, "sphinx": 1, "build": [1, 4, 12, 14, 15, 25, 29, 37, 38, 39, 40, 50, 52, 57], "authomat": 1, "readthedoc": 1, "particular": [1, 22, 29, 44], "pydoc": 1, "convert": [1, 6, 15, 29, 57], "api": [1, 55], "refer": [1, 10, 15, 23, 24, 25, 26, 29, 34, 55], "class": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 29, 57], "rst": 1, "local": [1, 15, 19, 20], "html": [1, 20, 29], "And": 1, "open": 1, "_build": 1, "index": [1, 12, 17, 27], "so": [1, 4, 10, 15, 25, 30, 57], "made": [1, 34], "addition": 1, "pandoc": 1, "On": [1, 4], "linux": 1, "sudo": 1, "apt": 1, "intsal": 1, "solv": [1, 3, 22, 29, 41, 42, 43, 44, 57], "problem": [1, 3, 22, 29, 41, 42, 43, 44, 57], "fo": 1, "alreadi": [1, 15, 19], "least": [1, 6, 21], "write": [1, 29], "graphic": [1, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 24, 25, 26, 34, 42, 43, 44, 53, 55, 57], "model": [1, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55], "object": [1, 15, 19, 22, 27, 30, 33, 34, 35, 36, 37, 40, 44], "configur": [1, 15], "default": [1, 10, 11, 12, 14, 19, 25, 26, 29, 34, 57], "valu": [1, 3, 4, 5, 6, 7, 8, 9, 12, 13, 15, 16, 17, 20, 22, 25, 26, 29, 36, 40, 44, 53, 57], "call": [1, 4, 15, 40, 43, 57], "from": [1, 2, 3, 4, 5, 15, 19, 20, 24, 25, 26, 27, 28, 29, 32, 33, 39, 40, 50, 56, 57], "condit": [1, 23, 25, 29], "semant": 1, "current": [1, 4, 19], "alpha": 1, "mean": [1, 2, 4, 15, 23, 25, 29, 33, 57], "major": 1, "0": [1, 2, 3, 4, 5, 10, 15, 20, 23, 25, 27, 28, 29, 40, 41, 48, 50, 52, 53, 57], "keep": 1, "right": [1, 4, 57], "break": 1, "There": [1, 57], "schedul": [1, 23], "try": [1, 4, 33], "minor": 1, "manual": 1, "action": 1, "click": 1, "upload": [1, 24], "workflow": 1, "same": [1, 3, 8, 15, 40, 57], "note": [1, 4, 41, 57], "describ": [1, 7, 15, 24, 57], "what": [1, 13, 15], "sinc": 1, "notebook": [2, 3, 4, 57], "reproduc": 2, "paper": [2, 4, 42, 43], "see": [2, 4, 19, 27, 29, 40, 57], "detail": [2, 22, 23, 44], "demonstr": [2, 57], "inferlo": [2, 4], "uai": [2, 19, 20], "cach": [2, 19], "experi": 2, "import": [2, 3, 4, 57], "numpi": [2, 3, 4, 15, 20, 57], "np": [2, 3, 4, 6, 15, 27, 28, 29, 31, 32, 38, 39, 45, 46, 57], "matplotlib": [2, 3, 4, 57], "pyplot": [2, 3, 4, 57], "plt": [2, 3, 4, 57], "time": [2, 3, 4, 25, 33, 35, 57], "grid_graph": [2, 4], "datasetload": [2, 4], "interop": [2, 3, 4], "libdaiinterop": [2, 3, 4], "gener": [2, 3, 4, 11, 12, 15, 29, 48, 49, 50, 51, 52, 53, 54, 57], "infer": [2, 3, 4, 10, 11, 12, 13, 14, 15, 26, 29, 30, 37, 42, 43, 55], "inf": [2, 4, 40], "loader": [2, 4], "libdai": [2, 4, 26, 29, 55], "assert": [2, 3, 4], "is_libdai_readi": [2, 4, 29], "exp_runn": [2, 4], "experimentrunn": [2, 4], "built": [2, 14, 29], "15x15": 2, "vari": 2, "interact": [2, 15, 36, 40, 46, 50, 51, 52, 54, 57], "strength": [2, 15], "observ": 2, "accuraci": [2, 3], "log": [2, 4, 13, 29, 40], "partit": [2, 4, 12, 13, 14, 15, 18, 19, 21, 25, 26, 29, 33, 34, 57], "depend": [2, 6, 8, 9, 12, 15, 25, 57], "ran": [2, 4], "mini": [2, 4, 25], "elimin": [2, 14, 21, 24, 25, 55], "buclet": 2, "compar": [2, 3, 4], "belief": [2, 3, 4, 22, 23, 25, 26, 29, 44], "propag": [2, 3, 4, 23, 25, 26, 29], "field": [2, 15, 18, 22, 25, 27, 29, 33, 40, 44, 49, 50, 51, 52, 54, 57], "weight": [2, 25], "exact": [2, 3, 4, 15, 18, 23, 25, 29, 30, 34, 57], "answer": [2, 4, 18, 37, 38, 39, 57], "fig": [2, 3, 57], "def": [2, 3, 4], "ising_grid_delta_v2": 2, "grid_siz": 2, "5": [2, 4, 15, 34, 41, 48, 51, 54, 57], "delta": 2, "seed": [2, 3, 4, 48, 49, 50, 51, 52, 53, 54, 57], "ibound": [2, 25], "10": [2, 3, 4, 25, 33, 53, 57], "graph": [2, 4, 10, 12, 14, 15, 22, 25, 26, 34, 35, 36, 37, 38, 39, 40, 46, 50, 51, 52, 54], "dim": [2, 4], "ising_model_on_graph": [2, 4], "field_rang": [2, 4, 50], "interaction_rang": [2, 4, 50], "true_log_pf": [2, 4, 18], "bucket_elimin": [2, 4, 25], "elimination_order_method": [2, 4, 25], "not_random": [2, 4, 25], "get_error": 2, "lambda": [2, 4, 57], "x": [2, 3, 4, 6, 9, 10, 12, 15, 41, 57], "ab": [2, 3, 4, 25, 57], "return": [2, 3, 4, 6, 9, 11, 12, 14, 15, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 39, 40, 41, 44, 45, 46, 49, 50, 51, 52, 54, 57], "mbr": [2, 4], "bucket_renorm": [2, 4, 25], "max_it": [2, 4, 23, 25, 33, 34], "gbr": 2, "mbe": [2, 4], "mini_bucket_elimin": [2, 4, 25], "wmbe": 2, "weighted_mini_bucket_elimin": [2, 25], "mf": [2, 3, 29], "mean_field": [2, 3, 15, 25, 57], "bp": [2, 3, 4, 29], "log_pf": [2, 4, 13, 33, 57], "delta_rang": 2, "linspac": 2, "9": [2, 4, 29, 42, 57], "repeat": [2, 15, 21], "rang": [2, 3, 4, 5, 15, 57], "run_experi": [2, 4], "15": [2, 3, 4, 57], "get_result": [2, 4], "filter_param": [2, 4], "algo": [2, 3, 4], "avg_error": 2, "param": [2, 4], "append": [2, 3, 4, 57], "plot": [2, 3, 4, 57], "label": [2, 3, 4, 28, 52], "marker": [2, 4], "o": [2, 4, 25, 29, 30, 35], "xlabel": 2, "\u03b4": 2, "ylabel": 2, "legend": [2, 3, 4], "xlim": 2, "ylim": 2, "8": [2, 3, 4, 57], "show": [2, 3, 4, 57], "f": [2, 4, 15, 41, 57], "infer_uai_dataset": 2, "dataset_nam": [2, 4, 19], "load_uai_dataset": [2, 4, 19], "elif": [2, 4], "belief_propag": [2, 25], "ijgp": 2, "iterative_join_graph_propag": [2, 25], "4": [2, 4, 57], "dai": [2, 26], "els": [2, 4], "rais": [2, 4, 15], "valueerror": [2, 4], "dataset_id_rang": 2, "arrai": [2, 3, 4, 10, 13, 15, 18, 20, 27, 28, 29, 31, 32, 38, 39, 45, 46, 57], "11": [2, 4, 57], "39": 2, "figur": [2, 4, 57], "figsiz": [2, 3, 4, 57], "ax": [2, 3, 4, 12, 14, 15, 57], "add_subplot": [2, 57], "dataset_id": 2, "promedus_": 2, "d": [2, 4, 15, 43, 57], "error_log10": 2, "scatter": 2, "set_xlabel": [2, 3, 4], "instanc": 2, "set_ylabel": [2, 3, 4], "set_xtick": 2, "set_ylim": [2, 4], "30": [2, 3, 4, 57], "sever": [3, 6, 29], "algorithm": [3, 11, 12, 14, 15, 21, 24, 25, 26, 27, 28, 29, 33, 34, 40, 55], "term": [3, 4, 15, 57], "exampl": [3, 4, 57], "pairwis": [3, 15, 22, 52], "tree_potts_model": 3, "grid_potts_model": [3, 57], "cross_potts_model": 3, "assert_results_clos": 3, "chart": [3, 4], "__init__": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 26, 29], "self": [3, 21], "dict": [3, 12, 26, 29], "add_point": 3, "alg_nam": 3, "gr_size": [3, 15, 30, 32, 33, 35, 38, 39, 48, 51, 54, 57], "none": [3, 6, 10, 11, 13, 18, 19, 25, 26, 29, 34, 51, 54], "acc": 3, "metric": 3, "item": 3, "setdefault": 3, "cnt": 3, "len": [3, 15, 57], "subplot": [3, 4], "y": [3, 4], "zip": 3, "size": [3, 4, 5, 7, 12, 15, 20, 22, 25, 29, 40, 42, 43, 44, 49, 51, 52, 53, 54, 57], "loc": 3, "possibl": [3, 15, 29, 57], "tree_dp": [3, 15], "dynam": [3, 15, 35, 36, 46, 47, 57], "program": [3, 15, 22, 35, 36, 42, 43, 44, 46, 47, 57], "give": [3, 4, 57], "measur": 3, "20": [3, 57], "50": 3, "al_siz": [3, 15, 30, 35, 48, 49, 51, 52, 54, 57], "t0": 3, "true_result": 3, "log_pf_tol": 3, "1e": [3, 4, 23, 25, 29], "true_running_tim": 3, "state": [3, 11, 12, 14, 15, 26, 29, 30, 31, 32, 38, 40, 41, 42, 43, 45, 46, 57], "max_likelihood": [3, 11, 12, 14, 15, 29, 57], "allclos": 3, "binari": [3, 4, 5, 25, 41, 42, 57], "cross": 3, "bound": [3, 22, 25, 33, 42, 43, 44, 57], "treewidth": [3, 15], "jtree": [3, 29], "ident": [3, 12, 28], "length": [3, 15, 38, 57], "width": [3, 4, 49], "result1": 3, "junction_tre": [3, 15], "result2": 3, "consid": [3, 15, 42], "5xn": 3, "approxim": [3, 15, 25, 29, 33, 34, 43, 57], "calcul": [3, 4, 14, 15, 21, 25, 26, 29, 32, 40], "betwen": 3, "true": [3, 4, 18, 19, 20, 25, 27, 33, 34, 36], "over": [3, 12, 21, 22, 44, 57], "6": [3, 4, 57], "100": [3, 29, 33, 57], "path_dp": [3, 15, 57], "marg_prob": [3, 4, 13, 26, 33, 57], "message_pass": [3, 15, 57], "max": [3, 4, 6, 26, 31, 41, 45, 46], "fbp": [3, 29], "hak": [3, 29], "trwbp": [3, 4, 29], "correctli": [3, 15], "guess": 3, "sum": [3, 4, 15, 21, 22, 30, 41, 44], "75": 3, "true_ml": 3, "ml": 3, "decmap": [3, 29], "gibb": [3, 29], "25": [3, 4], "250": 3, "375": 3, "500": 3, "dmytro": 4, "fedoriaka": 4, "februari": 4, "march": 4, "2021": 4, "experiment": 4, "part": [4, 12, 57], "probabilist": [4, 24, 57], "The": [4, 10, 15, 22, 38, 44, 57], "progress": 4, "propos": 4, "tr": 4, "bucket": [4, 24, 25, 55], "trivial": [4, 12, 57], "reduct": 4, "renormalizt": 4, "bt": 4, "tree": [4, 15, 25, 27, 29, 36, 37, 38, 39, 40, 46, 47, 54, 57], "reweight": [4, 29], "belif": 4, "project": [4, 43], "adapt": 4, "reason": [4, 24, 25], "independednt": 4, "appear": [4, 14, 15, 40, 57], "Thats": 4, "becaus": [4, 15, 40, 57], "guarante": [4, 14, 23, 27, 28, 33, 57], "Their": 4, "omn": 4, "big": [4, 57], "impract": 4, "synthet": 4, "BE": 4, "misleadingli": 4, "fast": 4, "special": 4, "womn": 4, "happen": [4, 34], "kullback": 4, "leibler": 4, "diverg": 4, "text": [4, 20], "mkld": 4, "p": [4, 10, 34, 42, 57], "frac": [4, 57], "n": [4, 5, 14, 25, 57], "sum_": [4, 57], "j": [4, 10, 15, 20, 29, 41, 57], "d_i": 4, "p_": 4, "ln": 4, "left": 4, "hat": 4, "_": 4, "where": [4, 9, 10, 14, 15, 19, 21, 22, 23, 25, 28, 29, 33, 35, 40, 44, 57], "given": [4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 25, 26, 27, 28, 50, 52, 57], "known": [4, 14, 15, 18, 57], "equal": [4, 22, 29, 40, 44, 57], "would": [4, 21], "divis": 4, "had": [4, 27], "adjust": 4, "proabil": 4, "veri": [4, 12], "small": [4, 15, 57], "posit": [4, 10, 17], "load_ext": [4, 57], "autoreload": [4, 57], "nx": 4, "scipi": 4, "kl_div": 4, "sy": [4, 57], "path": [4, 15, 19, 20, 28, 29, 35, 45, 57], "inferenceresult": [4, 15, 24, 25, 29, 30, 33, 34, 35, 36, 37, 57], "rcparam": 4, "font": 4, "18": [4, 57], "titles": 4, "labels": 4, "data_dir": [4, 19], "inferlo_dataset": 4, "inferlo_experi": 4, "mean_kl_div": 4, "q": [4, 22, 42, 44], "maximum": [4, 22, 29, 44, 57], "axi": 4, "13": [4, 57], "h": [4, 10], "syntet": 4, "x_i": [4, 10, 15, 41, 57], "mathbf": 4, "exp": [4, 9, 10, 15, 57], "mathcal": 4, "v": [4, 10, 15, 57], "phi_i": 4, "e": [4, 10, 15, 19, 36, 40, 57], "phi_": 4, "ij": 4, "x_j": [4, 57], "draw": [4, 12, 14, 15, 47, 57], "uniformli": [4, 50], "interv": 4, "everi": [4, 14, 15, 22, 25, 28, 29, 32, 39, 40, 42, 43, 44, 53, 57], "alwai": [4, 27, 28, 57], "each": [4, 10, 11, 12, 13, 14, 15, 23, 36, 57], "kl": 4, "ising_grid_dataset": 4, "height": [4, 49], "ising_grid_": 4, "dx": 4, "d_seed": 4, "custom_dataset_exist": [4, 19], "load_custom_dataset": [4, 19], "model_pwf": 4, "genericgraphmodel": [4, 18, 19, 20, 24, 25, 53, 57], "from_model": [4, 11, 14, 15, 57], "get_margin": [4, 25], "skip_last": [4, 25], "true_margin": [4, 18], "save_custom_dataset": [4, 19], "compare_marginals_ising_grid": 4, "w": 4, "nan": 4, "mini_bucket_elimination_bt": [4, 25], "mini_bucket_renormalization_bt": [4, 25], "unknown": 4, "log_pf_error": 4, "mean_abs_mp_diff": 4, "max_abs_mp_diff": 4, "31": [4, 24], "24": 4, "ax_mkld": 4, "ax_tim": 4, "h_to_tim": 4, "elapsed_tim": 4, "h_to_mkld": 4, "h_rang": 4, "sort": 4, "kei": [4, 29], "num_vars_rang": 4, "time_chart": 4, "mkld_chart": 4, "k": [4, 10, 42, 43], "x0": [4, 57], "polyfit": 4, "deg": [4, 22], "color": 4, "black": 4, "02f": 4, "set_xlim": 4, "400": 4, "05": [4, 25], "set_titl": [4, 57], "join": [4, 25], "set_xscal": 4, "set_yscal": 4, "much": 4, "better": 4, "fit": [4, 57], "scale": 4, "apper": 4, "while": [4, 40], "outperform": 4, "deliber": 4, "chosen": [4, 53], "goal": [4, 22, 44], "prove": 4, "rel": 4, "divid": [4, 25], "base": 4, "doe": [4, 19, 41], "full": [4, 19, 29], "onc": [4, 40, 57], "just": [4, 12, 29, 40, 57], "ax1": 4, "ax2": 4, "base_algo": 4, "base_result": 4, "h_to_base_tim": 4, "overhead": 4, "140": 4, "280": 4, "2x": 4, "expect": [4, 29], "close": [4, 57], "line": [4, 51], "got": 4, "even": 4, "ignor": 4, "like": [4, 12, 15, 29, 41, 45, 46], "log_2": 4, "approx": 4, "almost": [4, 29], "constant": [4, 57], "dor": 4, "explain": 4, "becom": 4, "smaller": 4, "cheaper": 4, "done": [4, 27], "less": [4, 20, 29, 40], "took": 4, "linkag": 4, "competit": [4, 19, 20], "sometim": 4, "investig": 4, "bug": 4, "implemnt": 4, "miss": 4, "shown": 4, "pb": 4, "compare_marginals_uai": 4, "except": [4, 22, 29, 36, 46, 57], "baseexcept": 4, "ex": 4, "str": [4, 12, 18, 19, 25, 26, 29], "run_dataset": 4, "order": [4, 15, 25, 27], "ibound_rang": 4, "mbe_mkld": 4, "renorm": [4, 25, 55], "12": [4, 57], "mbr_mkld": 4, "isfinit": 4, "axhlin": 4, "red": [4, 57], "green": [4, 57], "linkage_": 4, "19": [4, 57], "enumer": [4, 29], "subplots_adjust": 4, "hspace": 4, "sourc": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "domain": [5, 10, 11, 12, 14, 15, 16, 17, 20, 29, 53], "consist": [5, 13, 15, 16, 40], "finit": [5, 15, 22, 32, 44, 57], "static": [5, 6, 9, 11, 14, 15, 24, 26, 29], "two": [5, 14, 15, 21, 23, 57], "1": [5, 10, 15, 20, 22, 24, 25, 27, 28, 29, 33, 34, 40, 41, 42, 44, 50, 53, 57], "get_value_index": 5, "val": 5, "al": 5, "is_discret": [5, 7, 8], "whether": [5, 7, 8, 15, 23, 27, 29, 49, 51, 52, 54], "discret": [5, 6, 7, 8, 13, 15, 26, 29, 53, 57], "int": [5, 6, 8, 9, 11, 12, 14, 15, 17, 25, 27, 32, 39, 45, 46, 47], "integ": [5, 15, 28, 38, 52, 57], "cardin": [5, 7], "A": [6, 9, 10, 24, 25], "graphmodel": [6, 8, 9, 11, 14, 15, 17, 25, 26, 29], "var_idx": [6, 8, 9], "ndarrai": [6, 11, 12, 14, 15, 26, 27, 29, 38, 39, 45], "belong": [6, 8, 9, 17, 25], "indic": [6, 8, 9, 15, 27, 28, 42, 57], "from_factor": [6, 57], "arbitrari": [6, 26, 53, 57], "from_flat_valu": 6, "values_flat": 6, "specifi": [6, 11, 13, 19, 29, 53, 57], "1d": 6, "signific": 6, "margin": [6, 13, 15, 18, 19, 20, 22, 23, 24, 25, 26, 29, 33, 34, 36, 43, 44, 55, 57], "new_var_idx": 6, "subset": 6, "max_margin": 6, "prod": 6, "restrict": 6, "variable_id": 6, "fixed_valu": 6, "new": [6, 8, 14, 15, 21, 25, 33, 37, 38, 40, 41, 43, 57], "equival": [6, 14, 15, 26, 37, 38, 39, 40, 57], "float": [6, 8, 9, 12, 13, 18, 25, 26, 57], "insid": [6, 8, 9, 15], "abstract": [8, 12, 25, 57], "new_model": 8, "get_nam": 8, "explicitli": [9, 11, 15, 32, 57], "func": 9, "callabl": [9, 25], "apply_funct": 9, "g": [9, 10, 19, 57], "combine_factor": 9, "factor1": 9, "factor2": 9, "combine_with": 9, "anoth": [9, 12, 29, 57], "co": [9, 57], "sine": 9, "expon": [9, 15], "sin": 9, "gaussian": 10, "defin": 10, "an": [10, 15, 22, 27, 32, 34, 39, 42, 43, 44, 57], "undirect": [10, 15, 27], "node": [10, 15, 22, 28, 36, 40, 43, 44, 50, 52], "edg": [10, 12, 14, 15, 21, 22, 27, 44, 51, 54, 57], "jointli": 10, "probabl": [10, 11, 12, 13, 14, 15, 18, 20, 22, 24, 25, 26, 29, 32, 33, 34, 36, 38, 40, 42, 43, 44, 55, 57], "densiti": [10, 15, 22, 44, 57], "symmetr": 10, "definit": [10, 15, 29, 30, 57], "matrix": [10, 15, 41, 42, 51, 54, 57], "spars": 10, "respect": 10, "j_": [10, 57], "walk": 10, "sumsandbeliefpropagationingaussiangraphicalmodel": 10, "dmitri": 10, "malioutov": 10, "jason": 10, "johnson": 10, "alan": 10, "willski": [10, 23], "ssg": [10, 23], "mit": [10, 23, 43], "edu": [10, 19, 20, 23, 24, 42, 43], "group": [10, 23, 24], "publ_pdf": [10, 23], "185_pub_mlr": [10, 23], "pdf": [10, 12, 22, 23, 24, 42, 43, 44], "num_vari": [10, 11, 12, 14, 15, 53, 57], "attribut": [10, 13, 18, 29], "kwarg": [10, 11, 12, 14, 15], "form": [11, 15, 20, 27], "add_factor": [11, 12, 14, 15, 57], "copi": 11, "itself": [11, 57], "get_factor": [11, 12, 14, 15], "auto": [11, 12, 14, 15], "draw_factor_graph": [12, 57], "evalu": [12, 57], "non": [12, 15, 22, 43, 44, 57], "normal": [12, 14, 22, 25, 43, 44], "substitut": 12, "multipli": [12, 40], "get_factor_graph": 12, "tupl": 12, "bipartit": [12, 57], "denot": [12, 42, 57], "get_max_domain_s": 12, "biggest": 12, "get_symbolic_vari": [12, 57], "functionfactor": [12, 57], "prepar": 12, "express": [12, 57], "mathemat": 12, "get_vari": [12, 57], "idx": 12, "max_likelihood_bruteforc": 12, "ineffici": 12, "wai": [12, 57], "part_func_bruteforc": 12, "sampl": [12, 15, 32, 39, 50], "num_sampl": [12, 15, 32, 39, 47, 57], "z": [13, 41, 57], "logarithm": [13, 15, 18, 19, 25, 26, 29, 33, 40, 57], "assum": 13, "fornei": [14, 57], "style": [14, 57], "vertic": [14, 15, 27, 28, 50, 57], "exactli": [14, 27, 57], "initi": [14, 15, 26, 57], "valid": 14, "immut": 14, "check_built": 14, "draw_edge_variable_graph": [14, 57], "original_model": [14, 15], "construct": [14, 15, 42], "nfg": [14, 22, 57], "first": [14, 20, 21, 23, 27, 28, 40, 57], "get_edge_variable_graph": 14, "edge_elimin": 14, "string": [14, 15, 29], "proport": [15, 33], "store": [15, 19], "shape": [15, 27, 29, 32, 39], "pair": 15, "zero": [15, 29, 49, 51, 52, 54, 57], "physic": 15, "Ising": [15, 50, 57], "magnet": 15, "bias": 15, "spin": 15, "fact": [15, 57], "enter": 15, "energi": [15, 22, 42, 43, 44], "accord": 15, "bolzmann": 15, "distribut": [15, 32, 57], "kt": 15, "alphabet": [15, 22, 40, 42, 44, 49, 51, 52, 54, 57], "add_interact": [15, 57], "u": [15, 57], "between": [15, 27, 53, 57], "ad": [15, 27, 57], "old": 15, "isn": 15, "discard": 15, "union": 15, "compact": 15, "represent": [15, 57], "dtype": [15, 57], "edge_num": 15, "interacton": 15, "decrib": 15, "decode_st": 15, "id": [15, 28], "draw_pairwise_graph": [15, 57], "encode_st": 15, "extend": 15, "get_all_interact": 15, "matric": 15, "get_edg": 15, "get_dfs_result": 15, "fastdfsresult": [15, 27], "df": [15, 27], "get_edges_arrai": 15, "get_edges_connect": 15, "ensur": [15, 57], "connect": [15, 21, 27, 28, 34], "minim": [15, 27, 29], "amount": 15, "explicit": 15, "get_graph": 15, "get_interaction_matrix": 15, "keyerror": 15, "get_interactions_for_edg": 15, "get_subgraph_factor_valu": 15, "vars_idx": 15, "vars_skip": 15, "frozenset": 15, "subgraph": 15, "var": [15, 57], "combin": [15, 57], "product": [15, 57], "within": 15, "Or": 15, "condens": 15, "singl": [15, 23, 28, 29, 43], "supervari": [15, 40], "vars_skip_factor": 15, "skip": 15, "includ": 15, "oth": 15, "junction": [15, 29, 37, 38, 39, 40], "avoid": 15, "doubl": [15, 29], "count": [15, 40], "relev": 15, "has_edg": 15, "bool": [15, 25], "bruteforc": 15, "brute": [15, 29], "forc": [15, 29], "naiv": [15, 33], "messag": [15, 23, 26, 34, 57], "decomposit": [15, 28, 35, 37, 38, 39, 40, 45, 57], "effect": 15, "pathwidth": [15, 28, 35], "dp": [15, 35, 36, 45], "is_graph_acycl": 15, "acycl": [15, 34], "mani": [15, 33, 34, 57], "type": [15, 27, 29, 32, 39, 57], "int32": [15, 27, 32, 39, 57], "row": [15, 32, 39], "set_field": [15, 57], "real": [16, 57], "initializi": 17, "natur": [18, 25], "want": [19, 57], "being": [19, 57], "system": 19, "temporari": 19, "directori": 19, "custom": 19, "previous": 19, "datataset": 19, "load_file_": 19, "url_prefix": 19, "file_nam": 19, "web": 19, "noth": 19, "promedus_11": 19, "sli": [19, 24], "ic": [19, 24], "uci": [19, 24], "ihler": [19, 25], "Not": [19, 57], "support": [19, 26, 29, 41], "format": [20, 29], "read_margin": 20, "www": 20, "hlt": 20, "utdalla": 20, "vgogat": 20, "uai14": 20, "resformat": 20, "2d": 20, "dimens": [20, 29], "second": [20, 21, 23, 29, 44], "maxim": [20, 22, 23, 25, 29, 33, 34, 41, 44, 53], "th": [20, 28, 57], "read_model": 20, "modelformat": 20, "normalfactorgraphmodel": [21, 22, 57], "pick": 21, "loop": [21, 29, 34], "convolv": 21, "referenc": 21, "insert": 21, "strategi": 21, "otherwis": [21, 36, 46], "whose": [21, 40, 57], "degre": 21, "map_lp_result": [22, 44], "lp": [22, 41, 43, 44], "relax": [22, 41, 42, 43, 44], "map": [22, 26, 42, 43, 44], "linear": [22, 43, 44], "posteriori": [22, 44], "assign": [22, 44], "estim": [22, 25, 42, 43, 44, 57], "reduc": [22, 44], "polynomi": 22, "introduc": [22, 41, 42, 43, 44], "neg": [22, 25, 43, 44], "analog": [22, 44], "constraint": [22, 41, 43, 44, 57], "solut": [22, 41, 44], "upper": [22, 42, 43, 44], "restor": [22, 37, 38, 39, 44, 57], "lower": [22, 33, 44, 57], "dual": [22, 44], "found": [22, 42, 43, 44], "beliefpropag": [22, 44], "convex": [22, 44], "free": [22, 44], "yair": [22, 44], "weiss": [22, 44], "chen": [22, 44], "yanov": [22, 44], "talya": [22, 44], "meltzer": [22, 44], "arxiv": [22, 25, 44], "org": [22, 25, 27, 28, 29, 40, 44], "1206": [22, 44], "5286": [22, 44], "upper_bound": [22, 44], "lower_bound": [22, 44], "factor_belief": 22, "variable_belief": 22, "normalization_du": [22, 44], "marginalization_du": [22, 44], "tol": [23, 29], "09": [23, 29], "100000": 23, "satisfi": [23, 43], "suffici": 23, "diagon": 23, "domin": 23, "etc": 23, "toler": 23, "reach": 23, "round": 23, "under": 23, "fulli": 23, "parrallel": 23, "vector": 23, "obtain": [23, 57], "varianc": 23, "backward": 24, "regular": 24, "page": 24, "32": 24, "code": 24, "notat": 24, "qiang": [24, 25], "liu": [24, 25], "decis": 24, "unifi": [24, 25], "framework": [24, 25], "2014": 24, "pmwiki": 24, "liu_phd": 24, "1000": [25, 57], "converge_thr": 25, "damp_ratio": 25, "loopi": [25, 29], "converg": [25, 34], "threshold": 25, "damp": 25, "ratio": 25, "elimination_ord": 25, "rina": 25, "dechter": 25, "1999": 25, "1302": 25, "3572": 25, "bucket_elimination_bt": 25, "multipl": [25, 40, 57], "partial": [25, 57], "reus": 25, "conquer": 25, "techniqu": 25, "allow": [25, 40, 57], "logn": 25, "optim": [25, 33, 55], "sungsoo": 25, "ahn": 25, "michael": 25, "chertkov": 25, "adrian": 25, "weller": 25, "jinwoo": 25, "shin": 25, "2018": 25, "1803": 25, "05104": 25, "log_pf_algo": 25, "var_id": 25, "option": [25, 26, 29], "fals": [25, 36, 49, 51, 52, 54], "provid": 25, "high": [25, 57], "agnost": 25, "underli": [25, 35], "long": [25, 33], "up": [25, 30], "yield": 25, "kalev": 25, "kask": 25, "robert": 25, "mateescu": 25, "2012": 25, "1301": 25, "0564": 25, "01": 25, "irina": 25, "rish": 25, "scheme": 25, "2003": 25, "dl": 25, "acm": 25, "doi": 25, "1145": 25, "636865": 25, "636866": 25, "alexand": 25, "holder": 25, "inequ": 25, "2011": 25, "port": 26, "At": 26, "moment": [26, 42], "maxprod": 26, "prop": 26, "find_max_residu": 26, "residu": 26, "document": [26, 29], "descritpion": 26, "init": [26, 29], "awith": 26, "log_z": 26, "vert_num": 27, "depth": 27, "search": 27, "visit": 27, "input": [27, 29], "disconnect": 27, "complet": [27, 57], "vertex": [27, 28], "compon": [27, 28, 34], "was_disconnect": 27, "thank": 27, "cycl": 27, "output": [27, 29], "had_cycl": 27, "num_edg": 27, "dfs_edg": 27, "travers": 27, "leaf": 27, "was_tre": 27, "en": [27, 28, 40], "wikipedia": [27, 28, 40], "wiki": [27, 28, 40], "first_search": 27, "split": 28, "layer": 28, "greedi": 28, "decompos": [28, 37, 38, 39], "concaten": 28, "similar": 28, "Its": 28, "consecut": [28, 52], "start": [28, 52, 55], "disjoint": 28, "togeth": 28, "interoper": 29, "staff": 29, "fnwi": 29, "uva": 29, "nl": 29, "mooij": 29, "interfac": 29, "c": 29, "repons": 29, "git": 29, "bitbucket": 29, "jorism": 29, "instruct": 29, "readm": 29, "dir": 29, "bin": 29, "ubuntu": 29, "wasn": 29, "platform": 29, "verif": 29, "identifi": 29, "codenam": 29, "all_algorithm": 29, "cbp": 29, "decim": 29, "fraction": 29, "sampler": 29, "glc": 29, "correct": [29, 57], "lc": 29, "mr": 29, "montanari": 29, "rizzo": 29, "treeep": 29, "probabilti": 29, "logz": 29, "doesn": [29, 33, 57], "ll": 29, "thrown": 29, "enum": 29, "nest": 29, "encod": [29, 40], "key1": 29, "val1": 29, "key2": 29, "val2": 29, "look": 29, "properti": 29, "default_opt": 29, "aren": 29, "logdomain": 29, "seqrnd": 29, "bbp_cfn": 29, "cfn_gibbs_b": 29, "bbp_prop": 29, "choos": 29, "choose_random": 29, "clamp": 29, "clamp_var": 29, "maxit": 29, "10000": 29, "min_max_adj": 29, "123": [29, 57], "rec_tol": 29, "recurs": 29, "rec_fix": 29, "seqfix": 29, "ianam": 29, "iaopt": 29, "cavainam": 29, "cavaiopt": 29, "caviti": 29, "inainam": 29, "inaiopt": 29, "rgntype": 29, "cluster": [29, 42, 43], "beth": 29, "doubleloop": 29, "hugin": 29, "respprop": 29, "ml_algorithm": 29, "likelihood": [29, 31, 41, 45, 46, 57], "run_libdai": 29, "execut": 29, "imposs": [29, 40], "pad": 29, "write_fg_fil": 29, "file_path": 29, "fg": 29, "fileformat": 29, "pairwisefinitemodel": [30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 57], "complex": [30, 33, 35], "categor": 32, "iters_wait": 33, "num_attempt": 33, "num_it": 33, "pott": [33, 35, 49, 54, 57], "stop": 33, "improv": 33, "good": [34, 57], "useless": 34, "termin": 34, "without": [34, 57], "diamet": 34, "wainwright": [34, 42], "jordan": [34, 42], "exponenti": [34, 42], "famili": [34, 42], "variat": [34, 42], "2008": 34, "26": 34, "pw": 35, "subtree_mp": 36, "applic": [36, 46], "forest": [36, 46], "throw": [36, 46], "subtre": 36, "leav": 36, "iid": [39, 47], "junctionizedmodel": 40, "minimum": 40, "fill": 40, "heurist": 40, "power": 40, "maximaljunct": 40, "address": 40, "space": 40, "mark": 40, "account": 40, "again": 40, "achiev": 40, "actual": 40, "tree_decomposit": 40, "lprelaxresult": 41, "reformul": 41, "y_i": 41, "z_i": 41, "sum_i": 41, "sum_a": 41, "sum_j": 41, "sum_b": 41, "subject": [41, 57], "y_j": 41, "reshap": 41, "cvxpy": 41, "tensor": 41, "lasserre_result": 42, "hierarchi": [42, 43], "roduc": 42, "semidefinit": 42, "sdp": 42, "after": [42, 43, 57], "extract": [42, 43], "book": 42, "peopl": [42, 43], "eec": 42, "berkelei": 42, "wainwrig": 42, "waijor08_ftml": 42, "sherali_adams_result": 43, "sherali": 43, "adam": 43, "lift": 43, "produc": 43, "sontag": 43, "thesi": 43, "csail": 43, "dsontag": 43, "sontag_phd_thesi": 43, "quadrat": 44, "node_belief": 44, "edge_belief": 44, "pairwisefintemodel": [48, 49, 51, 54], "cliqu": 48, "111": [49, 51, 54], "zero_field": [49, 51, 52, 54], "grid": [49, 57], "heigth": 49, "wwidth": 49, "same_j": [51, 54], "num_factor": 53, "max_domain_s": 53, "max_factor_s": 53, "comparison": 55, "contribut": 55, "pypi": 56, "command": 56, "task": 57, "purpos": 57, "tutori": 57, "cell": 57, "unless": 57, "develop": 57, "essenti": 57, "usual": 57, "block": 57, "explicilti": 57, "x_0": 57, "x_1": 57, "x_2": 57, "x_3": 57, "sim": 57, "cdot": 57, "x3": 57, "x4": 57, "thing": 57, "match": 57, "whole": 57, "785309445728231": 57, "succint": 57, "symbol": 57, "shortcut": 57, "x1": 57, "x2": 57, "abov": 57, "could": 57, "practic": 57, "limit": 57, "individu": 57, "realdomain": 57, "discretedomain": 57, "mathbb": 57, "By": 57, "fcator": 57, "tabul": 57, "represnt": 57, "tabl": 57, "multidimension": 57, "discretefactor": 57, "explict": 57, "function_factor": 57, "discrete_factor": 57, "14": 57, "102": 57, "103": 57, "104": 57, "112": 57, "113": 57, "114": 57, "concret": 57, "effici": 57, "come": 57, "famou": 57, "al_isz": 57, "dot": 57, "formula": 57, "model1": 57, "model2": 57, "grap": 57, "someth": 57, "toi": 57, "34": 57, "12701627818652": 57, "88076347": 57, "11923653": 57, "parttion": 57, "highest": 57, "yet": 57, "realiz": 57, "16": 57, "accuract": 57, "5x5": 57, "17": 57, "156": 57, "4906749764044": 57, "41116171": 57, "00963484": 57, "57920346": 57, "6639": 57, "478242081531": 57, "4127652": 57, "00997726": 57, "57725754": 57, "146": 57, "0209085386057": 57, "27666686": 57, "00299012": 57, "72034302": 57, "partion": 57, "wrong": 57, "patit": 57, "wors": 57, "x5": 57, "get_ax": 57, "x_4": 57, "21": 57, "j1": 57, "varabl": 57, "select": 57, "wouldn": 57, "abl": 57, "element": 57}, "objects": {"inferlo": [[5, 0, 1, "", "DiscreteDomain"], [6, 0, 1, "", "DiscreteFactor"], [7, 0, 1, "", "Domain"], [8, 0, 1, "", "Factor"], [9, 0, 1, "", "FunctionFactor"], [10, 0, 1, "", "GaussianModel"], [11, 0, 1, "", "GenericGraphModel"], [12, 0, 1, "", "GraphModel"], [13, 0, 1, "", "InferenceResult"], [14, 0, 1, "", "NormalFactorGraphModel"], [15, 0, 1, "", "PairWiseFiniteModel"], [16, 0, 1, "", "RealDomain"], [17, 0, 1, "", "Variable"]], "inferlo.DiscreteDomain": [[5, 1, 1, "", "__init__"], [5, 1, 1, "", "binary"], [5, 1, 1, "", "get_value_index"], [5, 1, 1, "", "is_discrete"], [5, 1, 1, "", "range"], [5, 1, 1, "", "size"]], "inferlo.DiscreteFactor": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "from_factor"], [6, 1, 1, "", "from_flat_values"], [6, 1, 1, "", "marginal"], [6, 1, 1, "", "max_marginal"], [6, 1, 1, "", "restrict"], [6, 1, 1, "", "value"]], "inferlo.Domain": [[7, 1, 1, "", "__init__"], [7, 1, 1, "", "is_discrete"], [7, 1, 1, "", "size"]], "inferlo.Factor": [[8, 1, 1, "", "__init__"], [8, 1, 1, "", "clone"], [8, 1, 1, "", "get_name"], [8, 1, 1, "", "is_discrete"], [8, 1, 1, "", "value"]], "inferlo.FunctionFactor": [[9, 1, 1, "", "__init__"], [9, 1, 1, "", "apply_function"], [9, 1, 1, "", "combine_factors"], [9, 1, 1, "", "combine_with"], [9, 1, 1, "", "cos"], [9, 1, 1, "", "exp"], [9, 1, 1, "", "sin"], [9, 1, 1, "", "value"]], "inferlo.GaussianModel": [[10, 1, 1, "", "__init__"], [10, 1, 1, "", "infer"]], "inferlo.GenericGraphModel": [[11, 1, 1, "", "__init__"], [11, 1, 1, "", "add_factor"], [11, 1, 1, "", "copy"], [11, 1, 1, "", "from_model"], [11, 1, 1, "", "get_factors"], [11, 1, 1, "", "infer"], [11, 1, 1, "", "max_likelihood"]], "inferlo.GraphModel": [[12, 1, 1, "", "__init__"], [12, 1, 1, "", "add_factor"], [12, 1, 1, "", "draw_factor_graph"], [12, 1, 1, "", "evaluate"], [12, 1, 1, "", "get_factor_graph"], [12, 1, 1, "", "get_factors"], [12, 1, 1, "", "get_max_domain_size"], [12, 1, 1, "", "get_symbolic_variables"], [12, 1, 1, "", "get_variable"], [12, 1, 1, "", "get_variables"], [12, 1, 1, "", "infer"], [12, 1, 1, "", "max_likelihood"], [12, 1, 1, "", "max_likelihood_bruteforce"], [12, 1, 1, "", "part_func_bruteforce"], [12, 1, 1, "", "sample"]], "inferlo.InferenceResult": [[13, 1, 1, "", "__init__"]], "inferlo.NormalFactorGraphModel": [[14, 1, 1, "", "__init__"], [14, 1, 1, "", "add_factor"], [14, 1, 1, "", "build"], [14, 1, 1, "", "check_built"], [14, 1, 1, "", "draw_edge_variable_graph"], [14, 1, 1, "", "from_model"], [14, 1, 1, "", "get_edge_variable_graph"], [14, 1, 1, "", "get_factors"], [14, 1, 1, "", "infer"], [14, 1, 1, "", "max_likelihood"]], "inferlo.PairWiseFiniteModel": [[15, 1, 1, "", "__init__"], [15, 1, 1, "", "add_factor"], [15, 1, 1, "", "add_interaction"], [15, 1, 1, "", "create"], [15, 1, 1, "", "decode_state"], [15, 1, 1, "", "draw_pairwise_graph"], [15, 1, 1, "", "encode_state"], [15, 1, 1, "", "from_model"], [15, 1, 1, "", "get_all_interactions"], [15, 1, 1, "", "get_dfs_result"], [15, 1, 1, "", "get_edges_array"], [15, 1, 1, "", "get_edges_connected"], [15, 1, 1, "", "get_factors"], [15, 1, 1, "", "get_graph"], [15, 1, 1, "", "get_interaction_matrix"], [15, 1, 1, "", "get_interactions_for_edges"], [15, 1, 1, "", "get_subgraph_factor_values"], [15, 1, 1, "", "has_edge"], [15, 1, 1, "", "infer"], [15, 1, 1, "", "is_graph_acyclic"], [15, 1, 1, "", "max_likelihood"], [15, 1, 1, "", "sample"], [15, 1, 1, "", "set_field"]], "inferlo.RealDomain": [[16, 1, 1, "", "__init__"]], "inferlo.Variable": [[17, 1, 1, "", "__init__"]], "inferlo.datasets": [[18, 0, 1, "", "Dataset"], [19, 0, 1, "", "DatasetLoader"], [20, 0, 1, "", "UaiReader"]], "inferlo.datasets.Dataset": [[18, 1, 1, "", "__init__"]], "inferlo.datasets.DatasetLoader": [[19, 1, 1, "", "__init__"], [19, 1, 1, "", "custom_dataset_exists"], [19, 1, 1, "", "load_custom_dataset"], [19, 1, 1, "", "load_file_"], [19, 1, 1, "", "load_uai_dataset"], [19, 1, 1, "", "save_custom_dataset"]], "inferlo.datasets.UaiReader": [[20, 1, 1, "", "__init__"], [20, 1, 1, "", "read_marginals"], [20, 1, 1, "", "read_model"]], "inferlo.forney.edge_elimination": [[21, 2, 1, "", "infer_edge_elimination"]], "inferlo.forney.optimization.nfg_map_lp": [[22, 2, 1, "", "map_lp"]], "inferlo.gaussian.inference.gaussian_belief_propagation": [[23, 2, 1, "", "gaussian_BP"]], "inferlo.generic.inference": [[24, 0, 1, "", "BackwardBucketElimination"], [25, 3, 0, "-", "inference"]], "inferlo.generic.inference.BackwardBucketElimination": [[24, 1, 1, "", "__init__"], [24, 1, 1, "", "infer"]], "inferlo.generic.inference.inference": [[25, 2, 1, "", "belief_propagation"], [25, 2, 1, "", "bucket_elimination"], [25, 2, 1, "", "bucket_elimination_bt"], [25, 2, 1, "", "bucket_renormalization"], [25, 2, 1, "", "get_marginals"], [25, 2, 1, "", "iterative_join_graph_propagation"], [25, 2, 1, "", "mean_field"], [25, 2, 1, "", "mini_bucket_elimination"], [25, 2, 1, "", "mini_bucket_elimination_bt"], [25, 2, 1, "", "mini_bucket_renormalization_bt"], [25, 2, 1, "", "weighted_mini_bucket_elimination"]], "inferlo.generic.libdai_bp": [[26, 0, 1, "", "BP"]], "inferlo.generic.libdai_bp.BP": [[26, 1, 1, "", "__init__"], [26, 1, 1, "", "find_max_residual"], [26, 1, 1, "", "infer"], [26, 1, 1, "", "init"], [26, 1, 1, "", "log_z"], [26, 1, 1, "", "marg_prob"], [26, 1, 1, "", "run"]], "inferlo.graphs": [[27, 2, 1, "", "fast_dfs"], [28, 2, 1, "", "path_decomposition"]], "inferlo.interop": [[29, 0, 1, "", "LibDaiInterop"]], "inferlo.interop.LibDaiInterop": [[29, 4, 1, "", "ALL_ALGORITHMS"], [29, 4, 1, "", "DEFAULT_OPTIONS"], [29, 4, 1, "", "ML_ALGORITHMS"], [29, 1, 1, "", "__init__"], [29, 1, 1, "", "infer"], [29, 1, 1, "", "is_libdai_ready"], [29, 1, 1, "", "max_likelihood"], [29, 1, 1, "", "write_fg_file"]], "inferlo.pairwise.bruteforce": [[30, 2, 1, "", "infer_bruteforce"], [31, 2, 1, "", "max_lh_bruteforce"], [32, 2, 1, "", "sample_bruteforce"]], "inferlo.pairwise.inference.mean_field": [[33, 2, 1, "", "infer_mean_field"]], "inferlo.pairwise.inference.message_passing": [[34, 2, 1, "", "infer_message_passing"]], "inferlo.pairwise.inference.path_dp": [[35, 2, 1, "", "infer_path_dp"]], "inferlo.pairwise.inference.tree_dp": [[36, 2, 1, "", "infer_tree_dp"]], "inferlo.pairwise.junction_tree": [[37, 2, 1, "", "infer_junction_tree"], [38, 2, 1, "", "max_likelihood_junction_tree"], [39, 2, 1, "", "sample_junction_tree"], [40, 2, 1, "", "to_junction_tree_model"]], "inferlo.pairwise.optimization.convex_bounds": [[41, 2, 1, "", "lp_relaxation"]], "inferlo.pairwise.optimization.convex_hierarchies": [[42, 2, 1, "", "lasserre"], [43, 2, 1, "", "sherali_adams"]], "inferlo.pairwise.optimization.map_lp": [[44, 2, 1, "", "map_lp"]], "inferlo.pairwise.optimization.path_dp": [[45, 2, 1, "", "max_lh_path_dp"]], "inferlo.pairwise.optimization.tree_dp": [[46, 2, 1, "", "max_likelihood_tree_dp"]], "inferlo.pairwise.sampling.tree_dp": [[47, 2, 1, "", "sample_tree_dp"]], "inferlo.testing": [[48, 2, 1, "", "clique_potts_model"], [49, 2, 1, "", "grid_potts_model"], [50, 2, 1, "", "ising_model_on_graph"], [51, 2, 1, "", "line_potts_model"], [52, 2, 1, "", "pairwise_model_on_graph"], [53, 2, 1, "", "random_generic_model"], [54, 2, 1, "", "tree_potts_model"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:module", "4": "py:attribute"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"]}, "titleterms": {"api": 0, "refer": 0, "graphic": 0, "model": [0, 2, 57], "auxiliari": 0, "class": 0, "algorithm": [0, 1, 4, 57], "infer": [0, 23, 24, 25, 33, 34, 35, 36, 57], "optim": [0, 22, 41, 42, 43, 44, 45, 46, 57], "sampl": [0, 47, 57], "convers": [0, 57], "graph": [0, 3, 27, 28, 57], "gener": [0, 24, 25, 26], "interoper": 0, "dataset": [0, 2, 4, 18, 19, 20], "contribut": 1, "inferlo": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "first": 1, "time": 1, "setup": 1, "git": 1, "develop": [1, 55], "cycl": 1, "test": [1, 48, 49, 50, 51, 52, 53, 54], "code": 1, "style": 1, "document": [1, 55], "ad": 1, "new": 1, "releas": 1, "manag": 1, "bucket": 2, "renorm": 2, "1": [2, 3, 4], "Ising": [2, 4], "grid": [2, 3, 4], "2": [2, 3, 4], "promedu": 2, "libdai": 3, "comparison": 3, "margin": [3, 4], "probabl": [3, 4], "tree": 3, "maxim": 3, "likelihood": 3, "3": 3, "junction": 3, "4": 3, "5": 3, "elimin": 4, "experi": [4, 55], "accuraci": 4, "metric": 4, "uai": 4, "vari": 4, "ibound": 4, "discretedomain": 5, "discretefactor": 6, "domain": [7, 57], "factor": [8, 57], "functionfactor": 9, "gaussianmodel": 10, "genericgraphmodel": 11, "graphmodel": 12, "inferenceresult": 13, "normalfactorgraphmodel": 14, "pairwisefinitemodel": 15, "realdomain": 16, "variabl": [17, 57], "datasetload": 19, "uairead": 20, "fornei": [21, 22], "edge_elimin": 21, "infer_edge_elimin": 21, "nfg_map_lp": 22, "map_lp": [22, 44], "gaussian": 23, "gaussian_belief_propag": 23, "gaussian_bp": 23, "backwardbucketelimin": 24, "libdai_bp": 26, "bp": 26, "fast_df": 27, "path_decomposit": 28, "interop": 29, "libdaiinterop": 29, "pairwis": [30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 57], "bruteforc": [30, 31, 32], "infer_bruteforc": 30, "max_lh_bruteforc": 31, "sample_bruteforc": 32, "mean_field": 33, "infer_mean_field": 33, "message_pass": 34, "infer_message_pass": 34, "path_dp": [35, 45], "infer_path_dp": 35, "tree_dp": [36, 46, 47], "infer_tree_dp": 36, "junction_tre": [37, 38, 39, 40], "infer_junction_tre": 37, "max_likelihood_junction_tre": 38, "sample_junction_tre": 39, "to_junction_tree_model": 40, "convex_bound": 41, "lp_relax": 41, "convex_hierarchi": [42, 43], "lasserr": 42, "sherali_adam": 43, "max_lh_path_dp": 45, "max_likelihood_tree_dp": 46, "sample_tree_dp": 47, "clique_potts_model": 48, "grid_potts_model": 49, "ising_model_on_graph": 50, "line_potts_model": 51, "pairwise_model_on_graph": 52, "random_generic_model": 53, "tree_potts_model": 54, "tutori": 55, "instal": 56, "get": 57, "start": 57, "introduct": 57, "defin": 57, "normal": 57, "three": 57}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"API Reference": [[0, "api-reference"]], "Graphical models": [[0, "graphical-models"]], "Auxiliary classes": [[0, "auxiliary-classes"]], "Algorithms on graphical models": [[0, "algorithms-on-graphical-models"]], "Inference algorithms": [[0, "inference-algorithms"]], "Optimization algorithms": [[0, "optimization-algorithms"]], "Sampling algorithms": [[0, "sampling-algorithms"]], "Model conversion algorithms": [[0, "model-conversion-algorithms"]], "Algorithm on graphs": [[0, "algorithm-on-graphs"]], "Model generators": [[0, "model-generators"]], "Interoperation": [[0, "interoperation"]], "Datasets": [[0, "datasets"]], "Contributing to InferLO": [[1, "contributing-to-inferlo"]], "First time setup": [[1, "first-time-setup"]], "Git": [[1, "git"]], "Development cycle": [[1, "development-cycle"]], "Testing": [[1, "testing"]], "Code style": [[1, "code-style"]], "Documentation": [[1, "documentation"], [55, "documentation"]], "Adding new algorithms": [[1, "adding-new-algorithms"]], "Release management": [[1, "release-management"]], "Bucket renormalization": [[2, "Bucket-renormalization"]], "1. Ising model on grid": [[2, "1.-Ising-model-on-grid"]], "2. Promedus dataset": [[2, "2.-Promedus-dataset"]], "Inferlo and libDAI comparison": [[3, "Inferlo-and-libDAI-comparison"]], "1. Marginal probabilities on trees": [[3, "1.-Marginal-probabilities-on-trees"]], "2. Maximal likelihood on trees": [[3, "2.-Maximal-likelihood-on-trees"]], "3. Marginal probabilities with junction tree": [[3, "3.-Marginal-probabilities-with-junction-tree"]], "4. Marginal probabilities for the grid graph": [[3, "4.-Marginal-probabilities-for-the-grid-graph"]], "5. Maximal likelihood for the grid graph": [[3, "5.-Maximal-likelihood-for-the-grid-graph"]], "Marginal Probabilities with Elimination algorithms": [[4, "Marginal-Probabilities-with-Elimination-algorithms"]], "Experiments": [[4, "Experiments"], [55, null]], "Algorithms": [[4, "Algorithms"], [57, "Algorithms"]], "Accuracy metric": [[4, "Accuracy-metric"]], "Experiment 1 : Ising Grid.": [[4, "Experiment-1-:-Ising-Grid."]], "Experiment 2: UAI datasets with varying ibound.": [[4, "Experiment-2:-UAI-datasets-with-varying-ibound."]], "inferlo.DiscreteDomain": [[5, "inferlo-discretedomain"]], "inferlo.DiscreteFactor": [[6, "inferlo-discretefactor"]], "inferlo.Domain": [[7, "inferlo-domain"]], "inferlo.Factor": [[8, "inferlo-factor"]], "inferlo.FunctionFactor": [[9, "inferlo-functionfactor"]], "inferlo.GaussianModel": [[10, "inferlo-gaussianmodel"]], "inferlo.GenericGraphModel": [[11, "inferlo-genericgraphmodel"]], "inferlo.GraphModel": [[12, "inferlo-graphmodel"]], "inferlo.InferenceResult": [[13, "inferlo-inferenceresult"]], "inferlo.NormalFactorGraphModel": [[14, "inferlo-normalfactorgraphmodel"]], "inferlo.PairWiseFiniteModel": [[15, "inferlo-pairwisefinitemodel"]], "inferlo.RealDomain": [[16, "inferlo-realdomain"]], "inferlo.Variable": [[17, "inferlo-variable"]], "inferlo.datasets.Dataset": [[18, "inferlo-datasets-dataset"]], "inferlo.datasets.DatasetLoader": [[19, "inferlo-datasets-datasetloader"]], "inferlo.datasets.UaiReader": [[20, "inferlo-datasets-uaireader"]], "inferlo.forney.edge_elimination.infer_edge_elimination": [[21, "inferlo-forney-edge-elimination-infer-edge-elimination"]], "inferlo.forney.optimization.nfg_map_lp.map_lp": [[22, "inferlo-forney-optimization-nfg-map-lp-map-lp"]], "inferlo.gaussian.inference.gaussian_belief_propagation.gaussian_BP": [[23, "inferlo-gaussian-inference-gaussian-belief-propagation-gaussian-bp"]], "inferlo.generic.inference.BackwardBucketElimination": [[24, "inferlo-generic-inference-backwardbucketelimination"]], "inferlo.generic.inference.inference": [[25, "module-inferlo.generic.inference.inference"]], "inferlo.generic.libdai_bp.BP": [[26, "inferlo-generic-libdai-bp-bp"]], "inferlo.graphs.fast_dfs": [[27, "inferlo-graphs-fast-dfs"]], "inferlo.graphs.path_decomposition": [[28, "inferlo-graphs-path-decomposition"]], "inferlo.interop.LibDaiInterop": [[29, "inferlo-interop-libdaiinterop"]], "inferlo.pairwise.bruteforce.infer_bruteforce": [[30, "inferlo-pairwise-bruteforce-infer-bruteforce"]], "inferlo.pairwise.bruteforce.max_lh_bruteforce": [[31, "inferlo-pairwise-bruteforce-max-lh-bruteforce"]], "inferlo.pairwise.bruteforce.sample_bruteforce": [[32, "inferlo-pairwise-bruteforce-sample-bruteforce"]], "inferlo.pairwise.inference.mean_field.infer_mean_field": [[33, "inferlo-pairwise-inference-mean-field-infer-mean-field"]], "inferlo.pairwise.inference.message_passing.infer_message_passing": [[34, "inferlo-pairwise-inference-message-passing-infer-message-passing"]], "inferlo.pairwise.inference.path_dp.infer_path_dp": [[35, "inferlo-pairwise-inference-path-dp-infer-path-dp"]], "inferlo.pairwise.inference.tree_dp.infer_tree_dp": [[36, "inferlo-pairwise-inference-tree-dp-infer-tree-dp"]], "inferlo.pairwise.junction_tree.infer_junction_tree": [[37, "inferlo-pairwise-junction-tree-infer-junction-tree"]], "inferlo.pairwise.junction_tree.max_likelihood_junction_tree": [[38, "inferlo-pairwise-junction-tree-max-likelihood-junction-tree"]], "inferlo.pairwise.junction_tree.sample_junction_tree": [[39, "inferlo-pairwise-junction-tree-sample-junction-tree"]], "inferlo.pairwise.junction_tree.to_junction_tree_model": [[40, "inferlo-pairwise-junction-tree-to-junction-tree-model"]], "inferlo.pairwise.optimization.convex_bounds.lp_relaxation": [[41, "inferlo-pairwise-optimization-convex-bounds-lp-relaxation"]], "inferlo.pairwise.optimization.convex_hierarchies.lasserre": [[42, "inferlo-pairwise-optimization-convex-hierarchies-lasserre"]], "inferlo.pairwise.optimization.convex_hierarchies.sherali_adams": [[43, "inferlo-pairwise-optimization-convex-hierarchies-sherali-adams"]], "inferlo.pairwise.optimization.map_lp.map_lp": [[44, "inferlo-pairwise-optimization-map-lp-map-lp"]], "inferlo.pairwise.optimization.path_dp.max_lh_path_dp": [[45, "inferlo-pairwise-optimization-path-dp-max-lh-path-dp"]], "inferlo.pairwise.optimization.tree_dp.max_likelihood_tree_dp": [[46, "inferlo-pairwise-optimization-tree-dp-max-likelihood-tree-dp"]], "inferlo.pairwise.sampling.tree_dp.sample_tree_dp": [[47, "inferlo-pairwise-sampling-tree-dp-sample-tree-dp"]], "inferlo.testing.clique_potts_model": [[48, "inferlo-testing-clique-potts-model"]], "inferlo.testing.grid_potts_model": [[49, "inferlo-testing-grid-potts-model"]], "inferlo.testing.ising_model_on_graph": [[50, "inferlo-testing-ising-model-on-graph"]], "inferlo.testing.line_potts_model": [[51, "inferlo-testing-line-potts-model"]], "inferlo.testing.pairwise_model_on_graph": [[52, "inferlo-testing-pairwise-model-on-graph"]], "inferlo.testing.random_generic_model": [[53, "inferlo-testing-random-generic-model"]], "inferlo.testing.tree_potts_model": [[54, "inferlo-testing-tree-potts-model"]], "InferLO": [[55, "inferlo"]], "Tutorials": [[55, null]], "Developer documentation": [[55, null]], "Installing InferLO": [[56, "installing-inferlo"]], "Getting started with InferLO": [[57, "Getting-started-with-InferLO"]], "Introduction": [[57, "Introduction"]], "Defining a model": [[57, "Defining-a-model"]], "Variables and domains": [[57, "Variables-and-domains"]], "Factors": [[57, "Factors"]], "Pairwise models": [[57, "Pairwise-models"]], "Inference, Optimization and Sampling": [[57, "Inference,-Optimization-and-Sampling"]], "Normal Factor Graph models": [[57, "Normal-Factor-Graph-models"]], "Conversion to Normal Factor Graph model": [[57, "Conversion-to-Normal-Factor-Graph-model"]], "Three graphs of a model": [[57, "Three-graphs-of-a-model"]]}, "indexentries": {"discretedomain (class in inferlo)": [[5, "inferlo.DiscreteDomain"]], "__init__() (inferlo.discretedomain method)": [[5, "inferlo.DiscreteDomain.__init__"]], "binary() (inferlo.discretedomain static method)": [[5, "inferlo.DiscreteDomain.binary"]], "get_value_index() (inferlo.discretedomain method)": [[5, "inferlo.DiscreteDomain.get_value_index"]], "is_discrete() (inferlo.discretedomain method)": [[5, "inferlo.DiscreteDomain.is_discrete"]], "range() (inferlo.discretedomain static method)": [[5, "inferlo.DiscreteDomain.range"]], "size() (inferlo.discretedomain method)": [[5, "inferlo.DiscreteDomain.size"]], "discretefactor (class in inferlo)": [[6, "inferlo.DiscreteFactor"]], "__init__() (inferlo.discretefactor method)": [[6, "inferlo.DiscreteFactor.__init__"]], "from_factor() (inferlo.discretefactor static method)": [[6, "inferlo.DiscreteFactor.from_factor"]], "from_flat_values() (inferlo.discretefactor static method)": [[6, "inferlo.DiscreteFactor.from_flat_values"]], "marginal() (inferlo.discretefactor method)": [[6, "inferlo.DiscreteFactor.marginal"]], "max_marginal() (inferlo.discretefactor method)": [[6, "inferlo.DiscreteFactor.max_marginal"]], "restrict() (inferlo.discretefactor method)": [[6, "inferlo.DiscreteFactor.restrict"]], "value() (inferlo.discretefactor method)": [[6, "inferlo.DiscreteFactor.value"]], "domain (class in inferlo)": [[7, "inferlo.Domain"]], "__init__() (inferlo.domain method)": [[7, "inferlo.Domain.__init__"]], "is_discrete() (inferlo.domain method)": [[7, "inferlo.Domain.is_discrete"]], "size() (inferlo.domain method)": [[7, "inferlo.Domain.size"]], "factor (class in inferlo)": [[8, "inferlo.Factor"]], "__init__() (inferlo.factor method)": [[8, "inferlo.Factor.__init__"]], "clone() (inferlo.factor method)": [[8, "inferlo.Factor.clone"]], "get_name() (inferlo.factor method)": [[8, "inferlo.Factor.get_name"]], "is_discrete() (inferlo.factor method)": [[8, "inferlo.Factor.is_discrete"]], "value() (inferlo.factor method)": [[8, "inferlo.Factor.value"]], "functionfactor (class in inferlo)": [[9, "inferlo.FunctionFactor"]], "__init__() (inferlo.functionfactor method)": [[9, "inferlo.FunctionFactor.__init__"]], "apply_function() (inferlo.functionfactor method)": [[9, "inferlo.FunctionFactor.apply_function"]], "combine_factors() (inferlo.functionfactor static method)": [[9, "inferlo.FunctionFactor.combine_factors"]], "combine_with() (inferlo.functionfactor method)": [[9, "inferlo.FunctionFactor.combine_with"]], "cos() (inferlo.functionfactor method)": [[9, "inferlo.FunctionFactor.cos"]], "exp() (inferlo.functionfactor method)": [[9, "inferlo.FunctionFactor.exp"]], "sin() (inferlo.functionfactor method)": [[9, "inferlo.FunctionFactor.sin"]], "value() (inferlo.functionfactor method)": [[9, "inferlo.FunctionFactor.value"]], "gaussianmodel (class in inferlo)": [[10, "inferlo.GaussianModel"]], "__init__() (inferlo.gaussianmodel method)": [[10, "inferlo.GaussianModel.__init__"]], "infer() (inferlo.gaussianmodel method)": [[10, "inferlo.GaussianModel.infer"]], "genericgraphmodel (class in inferlo)": [[11, "inferlo.GenericGraphModel"]], "__init__() (inferlo.genericgraphmodel method)": [[11, "inferlo.GenericGraphModel.__init__"]], "add_factor() (inferlo.genericgraphmodel method)": [[11, "inferlo.GenericGraphModel.add_factor"]], "copy() (inferlo.genericgraphmodel method)": [[11, "inferlo.GenericGraphModel.copy"]], "from_model() (inferlo.genericgraphmodel static method)": [[11, "inferlo.GenericGraphModel.from_model"]], "get_factors() (inferlo.genericgraphmodel method)": [[11, "inferlo.GenericGraphModel.get_factors"]], "infer() (inferlo.genericgraphmodel method)": [[11, "inferlo.GenericGraphModel.infer"]], "max_likelihood() (inferlo.genericgraphmodel method)": [[11, "inferlo.GenericGraphModel.max_likelihood"]], "graphmodel (class in inferlo)": [[12, "inferlo.GraphModel"]], "__init__() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.__init__"]], "add_factor() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.add_factor"]], "draw_factor_graph() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.draw_factor_graph"]], "evaluate() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.evaluate"]], "get_factor_graph() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.get_factor_graph"]], "get_factors() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.get_factors"]], "get_max_domain_size() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.get_max_domain_size"]], "get_symbolic_variables() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.get_symbolic_variables"]], "get_variable() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.get_variable"]], "get_variables() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.get_variables"]], "infer() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.infer"]], "max_likelihood() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.max_likelihood"]], "max_likelihood_bruteforce() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.max_likelihood_bruteforce"]], "part_func_bruteforce() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.part_func_bruteforce"]], "sample() (inferlo.graphmodel method)": [[12, "inferlo.GraphModel.sample"]], "inferenceresult (class in inferlo)": [[13, "inferlo.InferenceResult"]], "__init__() (inferlo.inferenceresult method)": [[13, "inferlo.InferenceResult.__init__"]], "normalfactorgraphmodel (class in inferlo)": [[14, "inferlo.NormalFactorGraphModel"]], "__init__() (inferlo.normalfactorgraphmodel method)": [[14, "inferlo.NormalFactorGraphModel.__init__"]], "add_factor() (inferlo.normalfactorgraphmodel method)": [[14, "inferlo.NormalFactorGraphModel.add_factor"]], "build() (inferlo.normalfactorgraphmodel method)": [[14, "inferlo.NormalFactorGraphModel.build"]], "check_built() (inferlo.normalfactorgraphmodel method)": [[14, "inferlo.NormalFactorGraphModel.check_built"]], "draw_edge_variable_graph() (inferlo.normalfactorgraphmodel method)": [[14, "inferlo.NormalFactorGraphModel.draw_edge_variable_graph"]], "from_model() (inferlo.normalfactorgraphmodel static method)": [[14, "inferlo.NormalFactorGraphModel.from_model"]], "get_edge_variable_graph() (inferlo.normalfactorgraphmodel method)": [[14, "inferlo.NormalFactorGraphModel.get_edge_variable_graph"]], "get_factors() (inferlo.normalfactorgraphmodel method)": [[14, "inferlo.NormalFactorGraphModel.get_factors"]], "infer() (inferlo.normalfactorgraphmodel method)": [[14, "inferlo.NormalFactorGraphModel.infer"]], "max_likelihood() (inferlo.normalfactorgraphmodel method)": [[14, "inferlo.NormalFactorGraphModel.max_likelihood"]], "pairwisefinitemodel (class in inferlo)": [[15, "inferlo.PairWiseFiniteModel"]], "__init__() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.__init__"]], "add_factor() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.add_factor"]], "add_interaction() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.add_interaction"]], "create() (inferlo.pairwisefinitemodel static method)": [[15, "inferlo.PairWiseFiniteModel.create"]], "decode_state() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.decode_state"]], "draw_pairwise_graph() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.draw_pairwise_graph"]], "encode_state() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.encode_state"]], "from_model() (inferlo.pairwisefinitemodel static method)": [[15, "inferlo.PairWiseFiniteModel.from_model"]], "get_all_interactions() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.get_all_interactions"]], "get_dfs_result() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.get_dfs_result"]], "get_edges_array() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.get_edges_array"]], "get_edges_connected() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.get_edges_connected"]], "get_factors() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.get_factors"]], "get_graph() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.get_graph"]], "get_interaction_matrix() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.get_interaction_matrix"]], "get_interactions_for_edges() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.get_interactions_for_edges"]], "get_subgraph_factor_values() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.get_subgraph_factor_values"]], "has_edge() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.has_edge"]], "infer() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.infer"]], "is_graph_acyclic() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.is_graph_acyclic"]], "max_likelihood() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.max_likelihood"]], "sample() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.sample"]], "set_field() (inferlo.pairwisefinitemodel method)": [[15, "inferlo.PairWiseFiniteModel.set_field"]], "realdomain (class in inferlo)": [[16, "inferlo.RealDomain"]], "__init__() (inferlo.realdomain method)": [[16, "inferlo.RealDomain.__init__"]], "variable (class in inferlo)": [[17, "inferlo.Variable"]], "__init__() (inferlo.variable method)": [[17, "inferlo.Variable.__init__"]], "dataset (class in inferlo.datasets)": [[18, "inferlo.datasets.Dataset"]], "__init__() (inferlo.datasets.dataset method)": [[18, "inferlo.datasets.Dataset.__init__"]], "datasetloader (class in inferlo.datasets)": [[19, "inferlo.datasets.DatasetLoader"]], "__init__() (inferlo.datasets.datasetloader method)": [[19, "inferlo.datasets.DatasetLoader.__init__"]], "custom_dataset_exists() (inferlo.datasets.datasetloader method)": [[19, "inferlo.datasets.DatasetLoader.custom_dataset_exists"]], "load_custom_dataset() (inferlo.datasets.datasetloader method)": [[19, "inferlo.datasets.DatasetLoader.load_custom_dataset"]], "load_file_() (inferlo.datasets.datasetloader method)": [[19, "inferlo.datasets.DatasetLoader.load_file_"]], "load_uai_dataset() (inferlo.datasets.datasetloader method)": [[19, "inferlo.datasets.DatasetLoader.load_uai_dataset"]], "save_custom_dataset() (inferlo.datasets.datasetloader method)": [[19, "inferlo.datasets.DatasetLoader.save_custom_dataset"]], "uaireader (class in inferlo.datasets)": [[20, "inferlo.datasets.UaiReader"]], "__init__() (inferlo.datasets.uaireader method)": [[20, "inferlo.datasets.UaiReader.__init__"]], "read_marginals() (inferlo.datasets.uaireader method)": [[20, "inferlo.datasets.UaiReader.read_marginals"]], "read_model() (inferlo.datasets.uaireader method)": [[20, "inferlo.datasets.UaiReader.read_model"]], "infer_edge_elimination() (in module inferlo.forney.edge_elimination)": [[21, "inferlo.forney.edge_elimination.infer_edge_elimination"]], "map_lp() (in module inferlo.forney.optimization.nfg_map_lp)": [[22, "inferlo.forney.optimization.nfg_map_lp.map_lp"]], "gaussian_bp() (in module inferlo.gaussian.inference.gaussian_belief_propagation)": [[23, "inferlo.gaussian.inference.gaussian_belief_propagation.gaussian_BP"]], "backwardbucketelimination (class in inferlo.generic.inference)": [[24, "inferlo.generic.inference.BackwardBucketElimination"]], "__init__() (inferlo.generic.inference.backwardbucketelimination method)": [[24, "inferlo.generic.inference.BackwardBucketElimination.__init__"]], "infer() (inferlo.generic.inference.backwardbucketelimination static method)": [[24, "inferlo.generic.inference.BackwardBucketElimination.infer"]], "belief_propagation() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.belief_propagation"]], "bucket_elimination() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.bucket_elimination"]], "bucket_elimination_bt() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.bucket_elimination_bt"]], "bucket_renormalization() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.bucket_renormalization"]], "get_marginals() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.get_marginals"]], "inferlo.generic.inference.inference": [[25, "module-inferlo.generic.inference.inference"]], "iterative_join_graph_propagation() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.iterative_join_graph_propagation"]], "mean_field() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.mean_field"]], "mini_bucket_elimination() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.mini_bucket_elimination"]], "mini_bucket_elimination_bt() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.mini_bucket_elimination_bt"]], "mini_bucket_renormalization_bt() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.mini_bucket_renormalization_bt"]], "module": [[25, "module-inferlo.generic.inference.inference"]], "weighted_mini_bucket_elimination() (in module inferlo.generic.inference.inference)": [[25, "inferlo.generic.inference.inference.weighted_mini_bucket_elimination"]], "bp (class in inferlo.generic.libdai_bp)": [[26, "inferlo.generic.libdai_bp.BP"]], "__init__() (inferlo.generic.libdai_bp.bp method)": [[26, "inferlo.generic.libdai_bp.BP.__init__"]], "find_max_residual() (inferlo.generic.libdai_bp.bp method)": [[26, "inferlo.generic.libdai_bp.BP.find_max_residual"]], "infer() (inferlo.generic.libdai_bp.bp static method)": [[26, "inferlo.generic.libdai_bp.BP.infer"]], "init() (inferlo.generic.libdai_bp.bp method)": [[26, "inferlo.generic.libdai_bp.BP.init"]], "log_z() (inferlo.generic.libdai_bp.bp method)": [[26, "inferlo.generic.libdai_bp.BP.log_z"]], "marg_prob() (inferlo.generic.libdai_bp.bp method)": [[26, "inferlo.generic.libdai_bp.BP.marg_prob"]], "run() (inferlo.generic.libdai_bp.bp method)": [[26, "inferlo.generic.libdai_bp.BP.run"]], "fast_dfs() (in module inferlo.graphs)": [[27, "inferlo.graphs.fast_dfs"]], "path_decomposition() (in module inferlo.graphs)": [[28, "inferlo.graphs.path_decomposition"]], "all_algorithms (inferlo.interop.libdaiinterop attribute)": [[29, "inferlo.interop.LibDaiInterop.ALL_ALGORITHMS"]], "default_options (inferlo.interop.libdaiinterop attribute)": [[29, "inferlo.interop.LibDaiInterop.DEFAULT_OPTIONS"]], "libdaiinterop (class in inferlo.interop)": [[29, "inferlo.interop.LibDaiInterop"]], "ml_algorithms (inferlo.interop.libdaiinterop attribute)": [[29, "inferlo.interop.LibDaiInterop.ML_ALGORITHMS"]], "__init__() (inferlo.interop.libdaiinterop method)": [[29, "inferlo.interop.LibDaiInterop.__init__"]], "infer() (inferlo.interop.libdaiinterop method)": [[29, "inferlo.interop.LibDaiInterop.infer"]], "is_libdai_ready() (inferlo.interop.libdaiinterop method)": [[29, "inferlo.interop.LibDaiInterop.is_libdai_ready"]], "max_likelihood() (inferlo.interop.libdaiinterop method)": [[29, "inferlo.interop.LibDaiInterop.max_likelihood"]], "write_fg_file() (inferlo.interop.libdaiinterop static method)": [[29, "inferlo.interop.LibDaiInterop.write_fg_file"]], "infer_bruteforce() (in module inferlo.pairwise.bruteforce)": [[30, "inferlo.pairwise.bruteforce.infer_bruteforce"]], "max_lh_bruteforce() (in module inferlo.pairwise.bruteforce)": [[31, "inferlo.pairwise.bruteforce.max_lh_bruteforce"]], "sample_bruteforce() (in module inferlo.pairwise.bruteforce)": [[32, "inferlo.pairwise.bruteforce.sample_bruteforce"]], "infer_mean_field() (in module inferlo.pairwise.inference.mean_field)": [[33, "inferlo.pairwise.inference.mean_field.infer_mean_field"]], "infer_message_passing() (in module inferlo.pairwise.inference.message_passing)": [[34, "inferlo.pairwise.inference.message_passing.infer_message_passing"]], "infer_path_dp() (in module inferlo.pairwise.inference.path_dp)": [[35, "inferlo.pairwise.inference.path_dp.infer_path_dp"]], "infer_tree_dp() (in module inferlo.pairwise.inference.tree_dp)": [[36, "inferlo.pairwise.inference.tree_dp.infer_tree_dp"]], "infer_junction_tree() (in module inferlo.pairwise.junction_tree)": [[37, "inferlo.pairwise.junction_tree.infer_junction_tree"]], "max_likelihood_junction_tree() (in module inferlo.pairwise.junction_tree)": [[38, "inferlo.pairwise.junction_tree.max_likelihood_junction_tree"]], "sample_junction_tree() (in module inferlo.pairwise.junction_tree)": [[39, "inferlo.pairwise.junction_tree.sample_junction_tree"]], "to_junction_tree_model() (in module inferlo.pairwise.junction_tree)": [[40, "inferlo.pairwise.junction_tree.to_junction_tree_model"]], "lp_relaxation() (in module inferlo.pairwise.optimization.convex_bounds)": [[41, "inferlo.pairwise.optimization.convex_bounds.lp_relaxation"]], "lasserre() (in module inferlo.pairwise.optimization.convex_hierarchies)": [[42, "inferlo.pairwise.optimization.convex_hierarchies.lasserre"]], "sherali_adams() (in module inferlo.pairwise.optimization.convex_hierarchies)": [[43, "inferlo.pairwise.optimization.convex_hierarchies.sherali_adams"]], "map_lp() (in module inferlo.pairwise.optimization.map_lp)": [[44, "inferlo.pairwise.optimization.map_lp.map_lp"]], "max_lh_path_dp() (in module inferlo.pairwise.optimization.path_dp)": [[45, "inferlo.pairwise.optimization.path_dp.max_lh_path_dp"]], "max_likelihood_tree_dp() (in module inferlo.pairwise.optimization.tree_dp)": [[46, "inferlo.pairwise.optimization.tree_dp.max_likelihood_tree_dp"]], "sample_tree_dp() (in module inferlo.pairwise.sampling.tree_dp)": [[47, "inferlo.pairwise.sampling.tree_dp.sample_tree_dp"]], "clique_potts_model() (in module inferlo.testing)": [[48, "inferlo.testing.clique_potts_model"]], "grid_potts_model() (in module inferlo.testing)": [[49, "inferlo.testing.grid_potts_model"]], "ising_model_on_graph() (in module inferlo.testing)": [[50, "inferlo.testing.ising_model_on_graph"]], "line_potts_model() (in module inferlo.testing)": [[51, "inferlo.testing.line_potts_model"]], "pairwise_model_on_graph() (in module inferlo.testing)": [[52, "inferlo.testing.pairwise_model_on_graph"]], "random_generic_model() (in module inferlo.testing)": [[53, "inferlo.testing.random_generic_model"]], "tree_potts_model() (in module inferlo.testing)": [[54, "inferlo.testing.tree_potts_model"]]}})